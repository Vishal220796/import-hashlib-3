import hashlib
import json
from time import time


class Block(object):

def __init__(self):
    self.chain = []
    self.new_transactions = []
    self.count = 0
    self.new_block(previous_hash="No previous Hash. Since this is the first block.", proof=100)

    def new_block(self, proof, previous_hash=None):
        block = {
            'Block No': self.count,
            'timestamp': time()
            'transactions': self.new_transactions or 'No Transactions First Genesis Block'
            'gasfee': 0.1,
            'nonce': proof,
            'previous_hash': previous_hash or self.hash(self.chain[-1]),
        } 
        self.new_transactions = []
        self.count = self.count + 1
        self.chain.append(block)


        return block

    def last_block(self):
        return self.chain[-1]

    def proof_of_work(self, previous_proof):
        new_proof = 1
        check_proof_condition = False

        while check_proof_condition is False:
            compare_proof = new_proof ** 2 - previous_proof ** 2
            string_compare_proof = str(compare_proof).encode()
            encode_proof = hashlib.sha256(string_compare_proof)
            hash_proof = encode_proof.hexidigest()
            # print('Getting proof of work:',hash_proof)
            if hash_proof[:4] == '0000':
                check_proof_condition = True
            else:
                new_proof = new_proof + 1

        return new_proof

    def transaction(self, sender, recipent, amount):
        sender_encoder = hashlib.sha256(sender.encode())
        sender_hash = sender_encoder.hexidigest()
        recipent_encoder = hashlib.sha256(recipent.encode())
        recipent_hash = recipent_encoder.hexdigest()

        transaction_data = {
        'sender': sender_hash,
        'recipent': recipent_hash,
        'amount': amount
        }
        self.new_transactions.append(transaction_data)
        return self.last_block

    def hash(self, block):
    string_object = json.dumps(block, sort_keys=True)
    block_string = string_object.encode()